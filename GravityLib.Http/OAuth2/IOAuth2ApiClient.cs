using System.Threading;
using System.Threading.Tasks;

namespace GravityLib.Http.OAuth2;

public interface IOAuth2ApiClient : IAPIClient
{
    /// <summary>
    /// Acquires JWT token that can be used to query the API.
    /// Default expiration time is 3600 seconds.
    /// Please contact DeviceIntegrations team for ClientId and ClientSecret.
    /// <returns> Returns <see cref="TokenErrorResponse"/> in case of error. </returns>
    /// </summary>
    Task<HttpResponse<TokenResponse>> AcquireAccessTokenAsync(string clientId, string clientSecret, string scope = null, string route = "token", CancellationToken cancellationToken = default);

    /// <summary>
    /// Acquires JWT token that can be used to query the API.
    /// Default expiration time is 3600 seconds.
    /// Please contact DeviceIntegrations team for ClientId and ClientSecret.
    /// <returns> Returns <see cref="TokenErrorResponse"/> in case of error. </returns>
    /// </summary>
    Task<HttpResponse<TokenResponse>> AcquireAccessTokenByRefreshTokenAsync(string clientId, string refreshToken, string route = "token", CancellationToken cancellationToken = default);

    /// <summary>
    /// Revokes a JWT token that was previously generated by the system.
    /// <returns> Returns <see cref="TokenErrorResponse"/> in case of error. </returns>
    /// </summary>
    Task<HttpResponse> RevokeTokenAsync(string clientId, string token, string route = "token/revoke", CancellationToken cancellationToken = default);
}